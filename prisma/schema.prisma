generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(name: "PostToAuthor", fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @db.ObjectId
    content   String
    parent    Post?    @relation(name: "PostToPost", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId  String?  @db.ObjectId
    comments  Post[]   @relation(name: "PostToPost")
    quote     Post?    @relation(name: "RepostToPost", fields: [quoteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    quoteId   String?  @db.ObjectId
    reposts   Post[]   @relation(name: "RepostToPost")
    likeIDs   String[] @db.ObjectId
    likes     User[]   @relation(name: "LikeToPost", fields: [likeIDs], references: [id])
    images    String[]
    videos    String[]
    createdAt DateTime @default(now())
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @unique @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    userAgent    String?
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    lastAccessed DateTime @default(now())
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String         @id @default(auto()) @map("_id") @db.ObjectId
    name                String?
    tag                 String?        @unique @default(cuid())
    lastTagReset        DateTime       @default(now())
    bio                 String?        @default("")
    email               String?        @unique
    emailVerified       DateTime?
    password            String?
    protected           Boolean        @default(false)
    banner              String?
    image               String?        @default("/assets/imgs/default-avatar.png")
    permissions         String         @default("0")
    roles               Role[]         @relation(name: "R2U", fields: [roleIds], references: [id])
    roleIds             String[]       @db.ObjectId
    verified            Boolean?       @default(false)
    posts               Post[]         @relation(name: "PostToAuthor")
    accounts            Account[]
    sessions            Session[]
    notifications       Notification[] @relation(name: "N2U")
    sentNotifications   Notification[] @relation(name: "N2T", fields: [sentNotificationIds], references: [id])
    sentNotificationIds String[]       @db.ObjectId
    likes               Post[]         @relation(name: "LikeToPost", fields: [likedPosts], references: [id])
    likedPosts          String[]       @db.ObjectId
    followers           User[]         @relation(name: "FollowToUser", fields: [followerIds], references: [id])
    followerIds         String[]       @db.ObjectId
    following           User[]         @relation(name: "FollowToUser", fields: [followingIds], references: [id])
    followingIds        String[]       @db.ObjectId
    Chats               Chat[]         @relation(name: "Chat2User", fields: [chatIds], references: [id])
    chatIds             String[]       @db.ObjectId
    Messages            Message[]      @relation(name: "Sender2User")
    ReadChats           Chat[]         @relation(name: "read", fields: [readChatIds], references: [id])
    readChatIds         String[]       @db.ObjectId
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Notification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(name: "N2U", fields: [userId], references: [id])
    targets   User[]   @relation(name: "N2T", fields: [targetIds], references: [id])
    type      String
    value     String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    userId    String   @db.ObjectId
    targetIds String[] @db.ObjectId
}

model Role {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String   @unique
    permissions String
    users       User[]   @relation(name: "R2U", fields: [userIds], references: [id])
    userIds     String[] @db.ObjectId
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
}

model StripeEvent {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

model Chat {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    image          String?
    participantIds String[]  @db.ObjectId
    participants   User[]    @relation(name: "Chat2User", fields: [participantIds], references: [id])
    Messages       Message[]
    Read           User[]    @relation(name: "read", fields: [readUserIds], references: [id])
    readUserIds    String[]  @db.ObjectId
}

model Message {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    chat      Chat     @relation(fields: [chatId], references: [id])
    sender    User     @relation(name: "Sender2User", fields: [userId], references: [id])
    message   String
    image     String?
    chatId    String   @db.ObjectId
    userId    String   @db.ObjectId
    createdAt DateTime @default(now())
}
