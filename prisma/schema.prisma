generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    user      User     @relation(name: "User2Post", fields: [userId], references: [id])
    userId    Int
    content   String
    parent    Post?    @relation(name: "PostToPost", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId  Int?
    comments  Post[]   @relation(name: "PostToPost")
    quote     Post?    @relation(name: "RepostToRepost", fields: [quoteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    quoteId   Int?
    reposts   Post[]   @relation(name: "RepostToRepost")
    likes     User[]
    createdAt DateTime @default(now())

    @@index([parentId])
    @@index([quoteId])
    @@index([userId])
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int     @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
    userId       Int

    @@index([userId])
}

model User {
    id                Int            @id @default(autoincrement())
    name              String?
    tag               String?        @unique @default(cuid())
    lastTagReset      DateTime       @default(now())
    bio               String?        @default("")
    email             String?        @unique
    emailVerified     DateTime?
    password          String?
    banner            String?
    image             String?        @default("/assets/imgs/default-avatar.png")
    permissions       String         @default("0")
    verified          Boolean?       @default(false)
    posts             Post[]         @relation(name: "User2Post")
    accounts          Account[]
    sessions          Session[]
    notifications     Notification[] @relation(name: "N2U")
    sentNotifications Notification[]
    likes             Post[]
    followers         User[]         @relation(name: "FollowToUser")
    following         User[]         @relation(name: "FollowToUser")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Notification {
    id        Int      @id @default(autoincrement())
    user      User     @relation(name: "N2U", fields: [userId], references: [id])
    targets   User[]
    type      String
    value     String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    userId    Int

    @@index([userId])
}
